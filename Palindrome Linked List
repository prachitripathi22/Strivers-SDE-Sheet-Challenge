LinkedListNode<int>* getMiddle(LinkedListNode<int> *head)
{
    LinkedListNode<int> *slow=head;
    LinkedListNode<int> *fast=head-> next;

    while(fast!=NULL && fast->next!=NULL)
    {
        slow=slow->next;
        fast=fast->next->next;
    }
    return slow;
}
LinkedListNode<int>* getReverse(LinkedListNode<int> *temp)
    {
        LinkedListNode<int> *prev=NULL;
        LinkedListNode<int> *temp1=NULL;

        while(temp!=NULL)
        {
            temp1=temp->next;
            temp->next=prev;
            prev=temp;
            temp=temp1;            
                
        }
        return prev;
    }

bool isPalindrome(LinkedListNode<int> *head) {
    // Write your code here.    
    if(head == NULL || head -> next == NULL)
        return true;

    LinkedListNode<int>* middle=getMiddle(head);
    LinkedListNode<int>* temp =middle->next;
    middle->next = getReverse(temp);
    
    
    LinkedListNode<int> *head1=head;
    LinkedListNode<int> *head2=middle->next;
    while(head2!=NULL)
    {
    if(head1->data!=head2->data)
    {
        return false;
    }
    head1=head1->next;
    head2=head2->next;
    }

    return true;    
}
